name: Run Gosec
on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master


jobs:
  go_security_scanners:
    runs-on: ubuntu-latest
    env:
      GO111MODULE: on
      GO_VERSION: "1.22.2"
    steps:
      - name: Checkout Source
        uses: actions/checkout@v3
      - name: Set go.mod version
        run: |
          function get_go_mod_version {  
              go_mod_path=$(find . -name 'go.mod' | head -n 1)
          
              if [[ -n "${go_mod_path}" ]]
              then 
                  # Get go.mod version, the regex is for input validation
                  GO_VERSION=$(cat ${go_mod_path} | grep -wE '^go [0-9]{1,2}\.[0-9]{1,3}(\.|$)([0-9]{1,3})?$' || true)
                  echo "$GO_VERSION" >> $GITHUB_ENV
                  
                  # Set the go version back to default if pattern does not match
                  if [[ "$GO_VERSION" == "" ]] 
                  then
                      echo "Regex pattern does not match, setting Go Version back to default"
                      echo "GO_VERSION=1.22.2" >> $GITHUB_ENV
                  fi 
              fi
          }
          
          get_go_mod_version
      - name: GO VERSION
        run: |
          # Updated env will only show up in the next step
          echo "Go Version (Step): $GO_VERSION"
          
      - name: Run Gosec Security Scanner
        uses: securego/gosec@master
        with:
          # we let the report trigger content trigger a failure using the GitHub Security features.
          args: '-quiet -fmt html -out gosec.html ./...'
      - name: Gosec Findings
        if: always()
        run: |
          IFS=$'\n'

          function gosec_report() {
              gosec_findings=$(cat gosec.html | grep 'var data' | sed 's+var data =++g' | sed 's+;$++g' | jq '.Issues[] | {"severity": .severity, "confidence": .confidence, "details": .details, "file": .file, "code": .code, "line": .line}')

              for finding in $(echo "${gosec_findings}" | jq -c '.')
              do 
                  severity=$(echo "${finding}" | jq '.severity')
                  confidence=$(echo "${finding}" | jq '.severity')
                  details=$(echo "${finding}" | jq '.details')
                  file=$(echo "${finding}" | jq '.file')
                  code=$(echo "${finding}" | jq '.code')
                  line=$(echo "${finding}" | jq '.line')
          
                  echo "/-------------------------------------------------------------------/"
                  echo "details:      ${details}"
                  echo "severity:     ${severity}"
                  echo "confidence:   ${confidence}"
                  echo "line:         ${line}"
                  echo "code:         ${code}"
                  echo "file:         ${file}"
                  echo ""
              done

              echo "Total Findings: $(echo ${gosec_findings} | jq -s 'length')"
          }
          
          gosec_report
      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: gosec html report
          path: ./gosec.html
          
      - name: Run govulncheck
        id: govulncheck
        if: always()
        uses: golang/govulncheck-action@v1
        with:
           go-version-input: 1.15
           go-package: ./...
